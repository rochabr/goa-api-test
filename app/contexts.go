// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "test": Application Contexts
//
// Command:
// $ goagen
// --design=goa-api-test/design
// --out=$(GOPATH)/src/goa-api-test
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"time"
	"unicode/utf8"
)

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateTestContext provides the test create action context.
type CreateTestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateTestPayload
}

// NewCreateTestContext parses the incoming request URL and body, performs validations and creates the
// context used by the test controller create action.
func NewCreateTestContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTestContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createTestPayload is the test create action payload.
type createTestPayload struct {
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" yaml:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Sor       *string    `form:"sor,omitempty" json:"sor,omitempty" yaml:"sor,omitempty" xml:"sor,omitempty"`
	TestID    *string    `form:"testId,omitempty" json:"testId,omitempty" yaml:"testId,omitempty" xml:"testId,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createTestPayload) Validate() (err error) {
	if payload.TestID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "testId"))
	}
	if payload.Sor == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sor"))
	}
	if payload.Sor != nil {
		if utf8.RuneCountInString(*payload.Sor) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.sor`, *payload.Sor, utf8.RuneCountInString(*payload.Sor), 1, true))
		}
	}
	if payload.TestID != nil {
		if utf8.RuneCountInString(*payload.TestID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.testId`, *payload.TestID, utf8.RuneCountInString(*payload.TestID), 1, true))
		}
	}
	return
}

// Publicize creates CreateTestPayload from createTestPayload
func (payload *createTestPayload) Publicize() *CreateTestPayload {
	var pub CreateTestPayload
	if payload.CreatedAt != nil {
		pub.CreatedAt = payload.CreatedAt
	}
	if payload.Sor != nil {
		pub.Sor = *payload.Sor
	}
	if payload.TestID != nil {
		pub.TestID = *payload.TestID
	}
	return &pub
}

// CreateTestPayload is the test create action payload.
type CreateTestPayload struct {
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" yaml:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Sor       string     `form:"sor" json:"sor" yaml:"sor" xml:"sor"`
	TestID    string     `form:"testId" json:"testId" yaml:"testId" xml:"testId"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateTestPayload) Validate() (err error) {
	if payload.TestID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "testId"))
	}
	if payload.Sor == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sor"))
	}
	if utf8.RuneCountInString(payload.Sor) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.sor`, payload.Sor, utf8.RuneCountInString(payload.Sor), 1, true))
	}
	if utf8.RuneCountInString(payload.TestID) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.testId`, payload.TestID, utf8.RuneCountInString(payload.TestID), 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTestContext) Created(r *Test) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.test+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTestContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListTestContext provides the test list action context.
type ListTestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListTestContext parses the incoming request URL and body, performs validations and creates the
// context used by the test controller list action.
func NewListTestContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTestContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTestContext) OK(r TestCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.test+json; type=collection")
	}
	if r == nil {
		r = TestCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTestContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListTestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ShowTestContext provides the test show action context.
type ShowTestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TestID string
}

// NewShowTestContext parses the incoming request URL and body, performs validations and creates the
// context used by the test controller show action.
func NewShowTestContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTestID := req.Params["testId"]
	if len(paramTestID) > 0 {
		rawTestID := paramTestID[0]
		rctx.TestID = rawTestID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTestContext) OK(r *Test) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.test+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTestContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateTestContext provides the test update action context.
type UpdateTestContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TestID  string
	Payload *TestPayload
}

// NewUpdateTestContext parses the incoming request URL and body, performs validations and creates the
// context used by the test controller update action.
func NewUpdateTestContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTestContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTestContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTestID := req.Params["testId"]
	if len(paramTestID) > 0 {
		rawTestID := paramTestID[0]
		rctx.TestID = rawTestID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateTestContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTestContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTestContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
