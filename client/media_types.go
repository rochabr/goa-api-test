// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "test": Application Media Types
//
// Command:
// $ goagen
// --design=goa-api-test/design
// --out=$(GOPATH)/src/goa-api-test
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A test unit (default view)
//
// Identifier: application/vnd.test+json; view=default
type Test struct {
	// Test creation date/time
	CreatedAt time.Time `form:"createdAt" json:"createdAt" yaml:"createdAt" xml:"createdAt"`
	// Unique id/number
	ID string `form:"id" json:"id" yaml:"id" xml:"id"`
	// System of record. Usually who created the Test.
	Sor string `form:"sor" json:"sor" yaml:"sor" xml:"sor"`
}

// Validate validates the Test media type instance.
func (mt *Test) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Sor == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "sor"))
	}

	return
}

// DecodeTest decodes the Test instance encoded in resp body.
func (c *Client) DecodeTest(resp *http.Response) (*Test, error) {
	var decoded Test
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// TestCollection is the media type for an array of Test (default view)
//
// Identifier: application/vnd.test+json; type=collection; view=default
type TestCollection []*Test

// Validate validates the TestCollection media type instance.
func (mt TestCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTestCollection decodes the TestCollection instance encoded in resp body.
func (c *Client) DecodeTestCollection(resp *http.Response) (TestCollection, error) {
	var decoded TestCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
