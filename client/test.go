// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "test": test Resource Client
//
// Command:
// $ goagen
// --design=goa-api-test/design
// --out=$(GOPATH)/src/goa-api-test
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"time"
)

// CreateTestPayload is the test create action payload.
type CreateTestPayload struct {
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" yaml:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Sor       string     `form:"sor" json:"sor" yaml:"sor" xml:"sor"`
	TestID    string     `form:"testId" json:"testId" yaml:"testId" xml:"testId"`
}

// CreateTestPath computes a request path to the create action of test.
func CreateTestPath() string {

	return fmt.Sprintf("/tests")
}

// Create new test
func (c *Client) CreateTest(ctx context.Context, path string, payload *CreateTestPayload) (*http.Response, error) {
	req, err := c.NewCreateTestRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTestRequest create the request corresponding to the create action endpoint of the test resource.
func (c *Client) NewCreateTestRequest(ctx context.Context, path string, payload *CreateTestPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// ListTestPath computes a request path to the list action of test.
func ListTestPath() string {

	return fmt.Sprintf("/tests")
}

// Retrieve all tests.
func (c *Client) ListTest(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTestRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTestRequest create the request corresponding to the list action endpoint of the test resource.
func (c *Client) NewListTestRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowTestPath computes a request path to the show action of test.
func ShowTestPath(testID string) string {
	param0 := testID

	return fmt.Sprintf("/tests/%s", param0)
}

// Get test by id
func (c *Client) ShowTest(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowTestRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowTestRequest create the request corresponding to the show action endpoint of the test resource.
func (c *Client) NewShowTestRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateTestPath computes a request path to the update action of test.
func UpdateTestPath(testID string) string {
	param0 := testID

	return fmt.Sprintf("/tests/%s", param0)
}

// UpdateTest makes a request to the update action endpoint of the test resource
func (c *Client) UpdateTest(ctx context.Context, path string, payload *TestPayload) (*http.Response, error) {
	req, err := c.NewUpdateTestRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateTestRequest create the request corresponding to the update action endpoint of the test resource.
func (c *Client) NewUpdateTestRequest(ctx context.Context, path string, payload *TestPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
