// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "test": Application User Types
//
// Command:
// $ goagen
// --design=goa-api-test/design
// --out=$(GOPATH)/src/goa-api-test
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"time"
	"unicode/utf8"
)

// testPayload user type.
type testPayload struct {
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" yaml:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Sor       *string    `form:"sor,omitempty" json:"sor,omitempty" yaml:"sor,omitempty" xml:"sor,omitempty"`
	TestID    *string    `form:"testId,omitempty" json:"testId,omitempty" yaml:"testId,omitempty" xml:"testId,omitempty"`
}

// Validate validates the testPayload type instance.
func (ut *testPayload) Validate() (err error) {
	if ut.Sor != nil {
		if utf8.RuneCountInString(*ut.Sor) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.sor`, *ut.Sor, utf8.RuneCountInString(*ut.Sor), 1, true))
		}
	}
	if ut.TestID != nil {
		if utf8.RuneCountInString(*ut.TestID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.testId`, *ut.TestID, utf8.RuneCountInString(*ut.TestID), 1, true))
		}
	}
	return
}

// Publicize creates TestPayload from testPayload
func (ut *testPayload) Publicize() *TestPayload {
	var pub TestPayload
	if ut.CreatedAt != nil {
		pub.CreatedAt = ut.CreatedAt
	}
	if ut.Sor != nil {
		pub.Sor = ut.Sor
	}
	if ut.TestID != nil {
		pub.TestID = ut.TestID
	}
	return &pub
}

// TestPayload user type.
type TestPayload struct {
	CreatedAt *time.Time `form:"createdAt,omitempty" json:"createdAt,omitempty" yaml:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Sor       *string    `form:"sor,omitempty" json:"sor,omitempty" yaml:"sor,omitempty" xml:"sor,omitempty"`
	TestID    *string    `form:"testId,omitempty" json:"testId,omitempty" yaml:"testId,omitempty" xml:"testId,omitempty"`
}

// Validate validates the TestPayload type instance.
func (ut *TestPayload) Validate() (err error) {
	if ut.Sor != nil {
		if utf8.RuneCountInString(*ut.Sor) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.sor`, *ut.Sor, utf8.RuneCountInString(*ut.Sor), 1, true))
		}
	}
	if ut.TestID != nil {
		if utf8.RuneCountInString(*ut.TestID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.testId`, *ut.TestID, utf8.RuneCountInString(*ut.TestID), 1, true))
		}
	}
	return
}
